#!/bin/sh
# PCP QA Test No. 1875
# Exercise pmseries & pmproxy with Redis authentication
#
# Copyright (c) 2021 Red Hat.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

_check_series
redis_version_major=`redis-server --version | sed -E 's/.*v=([0-9]).*/\1/g'`
[ $redis_version_major -ge 6 ] || _notrun "Redis version too old (this test requires Redis v6+)"

_cleanup()
{
    cd $here
    [ -n "$pmproxy_pid" ] && $signal -s TERM $pmproxy_pid
    [ -n "$redis_pid" ] && $signal -s TERM $redis_pid
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
signal=$PCP_BINADM_DIR/pmsignal

username=`id -u -n`

$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15


# real QA test starts here
echo "Start Redis server with password auth ..."
redisport=`_find_free_port`
redis-server --port $redisport --save "" --requirepass 'top$secret' > $tmp.redis 2>&1 &
redis_pid=$!
pmsleep 0.125

echo
echo "=== password auth enabled, no password provided"
cat <<EOF > $tmp.conf
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full | grep -o "Cannot connect"

echo
echo "=== password auth enabled, wrong password provided"
cat <<EOF > $tmp.conf
[pmseries]
enabled = true
auth.password = topsecret
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full| grep -o "Cannot connect"

echo
echo "=== password auth enabled, correct password provided"
cat <<EOF > $tmp.conf
[pmseries]
enabled = true
auth.password = top\$secret
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full| grep -o "Cannot connect" || echo OK

echo
echo "=== password auth enabled, correct password provided (pmproxy)"
pmproxyport=`_find_free_port`
pmproxy -f -U $username -x $tmp.err -l $tmp.pmproxy.log -p $pmproxyport -r $redisport -t -c $tmp.conf &
pmproxy_pid=$!
# check pmproxy has started and is available for requests
pmcd_wait -h localhost@localhost:$pmproxyport -v -t 5sec
grep -o "Redis slots, schema version setup" $tmp.pmproxy.log
$signal -s TERM $pmproxy_pid


echo
echo "Stop redis server with password auth ..."
$signal -s TERM $redis_pid


echo "Start Redis server with ACL auth ..."
redisport=`_find_free_port`
redis-server --port $redisport --save "" --user alice on '>top$secret' '~*' '+@all' --user default off > $tmp.redis 2>&1 &
redis_pid=$!
pmsleep 0.125

echo
echo "=== ACL auth enabled, no username/password provided"
cat <<EOF > $tmp.conf
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full | grep -o "Cannot connect"

echo
echo "=== ACL auth enabled, unknown username provided"
cat <<EOF > $tmp.conf
[pmseries]
enabled = true
auth.username = max
auth.password = topsecret
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full| grep -o "Cannot connect"

echo
echo "=== ACL auth enabled, correct username, wrong password provided"
cat <<EOF > $tmp.conf
[pmseries]
enabled = true
auth.username = alice
auth.password = topsecret
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full| grep -o "Cannot connect"

echo
echo "=== ACL auth enabled, correct username and password provided"
cat <<EOF > $tmp.conf
[pmseries]
enabled = true
auth.username = alice
auth.password = top\$secret
EOF
pmseries -p $redisport -c $tmp.conf disk.dev.read 2>&1 | tee -a $seq.full| grep -o "Cannot connect" || echo OK

echo
echo "=== ACL auth enabled, correct username and password provided (pmproxy)"
pmproxyport=`_find_free_port`
pmproxy -f -U $username -x $tmp.err -l $tmp.pmproxy.log -p $pmproxyport -r $redisport -t -c $tmp.conf &
pmproxy_pid=$!
# check pmproxy has started and is available for requests
pmcd_wait -h localhost@localhost:$pmproxyport -v -t 5sec
grep -o "Redis slots, schema version setup" $tmp.pmproxy.log


# success, all done
exit
