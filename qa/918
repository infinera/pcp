#!/bin/sh
# PCP QA Test No. 918
# Check pmcd with systemd - autorestart
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -n "$PCP_SYSTEMDUNIT_DIR" ] || _notrun "PCP_SYSTEMDUNIT_DIR not set, so no systemd here"
[ -f $PCP_SYSTEMDUNIT_DIR/pmcd.service ] || _notrun "$PCP_SYSTEMDUNIT_DIR/pmcd.service not found"
grep '^Restart=always' $PCP_SYSTEMDUNIT_DIR/pmcd.service >/dev/null || _notrun "no Restart=always in $PCP_SYSTEMDUNIT_DIR/pmcd.service"

_cleanup()
{
    cd $here
    _service pmcd stop >>$here/$seq.full 2>&1
    $restore_pcpqa_systemd && export PCPQA_SYSTEMD=$save_pcpqa_systemd
    _service pcp restart 2>&1 | _filter_pcp_start
    _wait_for_pmcd
    _wait_for_pmlogger
    $sudo rm -rf $tmp $tmp.*
}

restore_pcpqa_systemd=false

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

if [ "$PCPQA_SYSTEMD" = x -o "${PCPQA_SYSTEMD-x}" != x ]
then
    # $PCPQA_SYSTEMD is already set ...
    save_pcpqa_systemd="$PCPQA_SYSTEMD"
    restore_pcpqa_systemd=true
fi
unset PCPQA_SYSTEMD

# get to a known starting point as far as systemd is concerned
#
_service pmcd restart >>$here/$seq.full 2>&1

# real QA test starts here
old_pid=`_get_pids_by_name pmcd`
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '[P]ID|[p]mcd' >>$here/$seq.full
echo "old_pid=$old_pid" >>$here/$seq.full

echo "expect success ..."
pmprobe hinv.ncpu

$sudo $PCP_BINADM_DIR/pmsignal -a -s TERM pmcd
_wait_for_pmcd

new_pid=`_get_pids_by_name pmcd`
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '[P]ID|[p]mcd' >>$here/$seq.full
echo "new_pid=$new_pid" >>$here/$seq.full

if [ "$new_pid" != "$old_pid" ]
then
    echo "pmcd's PID changed, yippee"
else
    echo "Error: pmcd's PID ($old_pid) did not change, see $seq.full"
fi

echo "expect success ..."
pmprobe hinv.ncpu

# This test has 3 (re)starts, so we need it to run for (at least)
# 6 seconds to avoid hitting the systemd StartLimit* limits
#
sleep 6

# success, all done
status=0
exit
