#!/bin/sh
# PCP QA Test No. 1345
# Use libpcp_fault to exercise __pmAllocResult
#
# Copyright (c) 2021 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

src/check_fault_injection >/dev/null 2>&1 || \
    _notrun "libpcp not built with fault injection enabled"

do_valgrind=false
if [ "$1" = "--valgrind" ]
then
    _check_valgrind
    do_valgrind=true
fi

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter()
{
    sed \
	-e 's/<something>/<else>/' \
    # end
}

export PM_FAULT_CONTROL=$tmp.control
export LD_PRELOAD=$PCP_LIB_DIR/libpcp_fault.so

# real QA test starts here
echo "3rd call to __pmAllocResult from __pmLogFetchInterp() fails"
cat >$tmp.control <<End-of-File
libpcp/interp.c:1	== 3
End-of-File

pmval -z -a archives/ok-foo sample.seconds

if false
then
if $do_valgrind
then
    _run_valgrind ...your test goes here...
else
    ...your test goes here... 2>&1
fi \
| _filter
fi

# success, all done
exit

# real QA test starts here
src/exectest echo not supposed to get here 2>&1 \
| _filter

echo
echo "1st call to __pmProcessAddArg fails at realloc"
cat >$tmp.control <<End-of-File
libpcp/exec.c:2	== 1
End-of-File
src/exectest echo not supposed to get here 2>&1 \
| _filter

echo
echo "2nd (and later) calls to __pmProcessAddArg fails at realloc"
cat >$tmp.control <<End-of-File
libpcp/exec.c:2	> 1
End-of-File
src/exectest echo not supposed to get here 2>&1 \
| _filter

echo
echo "4th call to __pmProcessAddArg fails at strdup"
cat >$tmp.control <<End-of-File
libpcp/exec.c:3	== 4
End-of-File
src/exectest echo not supposed to get here 2>&1 \
| _filter

echo
echo "fork() fails"
cat >$tmp.control <<End-of-File
libpcp/exec.c:4	> 0
End-of-File
src/exectest -- sh -c "sleep 1; echo not supposed to get here" 2>&1 \
| _filter

echo
echo "pipe() fails"
cat >$tmp.control <<End-of-File
libpcp/exec.c:5	> 0
End-of-File
src/exectest -Dexec -p -- echo hullo world 2>&1 | _filter

echo
echo "fork() fails after pipe()"
cat >$tmp.control <<End-of-File
libpcp/exec.c:6	> 0
End-of-File
src/exectest -Dexec -p -- echo hullo world 2>&1 | _filter

echo
echo "realloc() fails for pipe map"
cat >$tmp.control <<End-of-File
libpcp/exec.c:7	> 0
End-of-File
src/exectest -Dexec -p -- echo hullo world 2>&1 | _filter

# success, all done
status=0
exit
