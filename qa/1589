#!/bin/sh
# PCP QA Test No. 1589
# Exercise pcp2json HTTP POST functionality.
#
# Copyright (c) 2023 Red Hat.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.python

$python -c "from pcp import pmapi" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python pcp pmapi module not installed"
$python -c "from collections import OrderedDict" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python collections OrderedDict module not installed"

which pcp2json >/dev/null 2>&1 || _notrun "pcp2json not installed"
which nc >/dev/null 2>&1 || _notrun "nc binary not installed"

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
cpus=`pmprobe -v hinv.ncpu | awk '{print $3}'`
hostname=`hostname`
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter_pcp2json_http()
{
    tee -a $here/$seq.full \
    | col -b \
    | sed \
	-e "s/\(\"@host\"\): \""$hostname"\"/\1:HOST/g" \
	-e "s/\(\"value\"\): \""$cpus"\"/\1:NCPU/g" \
	-e "s/\(\"@timestamp\"\): \"[1-9][0-9]*\"/\1:SECS/g" \
        -e "s/^\(Host: localhost\):$port/\1:PORT/g" \
        -e 's/^\(Content-Length:\) [1-9][0-9]*/\1 SIZE/g' \
        -e 's/^\(User-Agent: python-requests\).*/\1 VERSION/g' \
        -e 's/^\(Date:\).*/\1 DATE/g' \
        -e 's/\(\"context\":\) [0-9][0-9]*/\1 CTXID/g' \
        -e '/^Accept-Encoding: /d' \
        -e '/^Connection: keep-alive/d' \
        -e '/ using stream socket$/d' \
    | LC_COLLATE=POSIX sort
}

# real QA test starts here
port=`_find_free_port`
nc -l localhost $port >$tmp.nc.out 2>$tmp.nc.err &
pid1=$!
sleep 2 # let nc start up

# in case nc(1) does not exit by itself, e.g. on Ubuntu
( sleep 2; $signal $pid1 ) >>$seq.full 2>&1 &

echo "pcp2json invocation" | tee -a $here/$seq.full
pcp2json -s1 -f%s -ZUTC --url http://localhost:$port/receive hinv.ncpu > $tmp.json.out 2> $tmp.json.err

echo "pcp2json HTTP POST (sorted):"
_filter_pcp2json_http <$tmp.nc.out

echo "All diagnostics" >> $here/$seq.full
for i in $tmp.json.out $tmp.json.err $tmp.nc.out $tmp.nc.err
do
    echo "=== $i ===" >>$here/$seq.full
    cat $i >>$here/$seq.full
done

echo "" | tee -a $here/$seq.full

# success, all done
exit
